package com.jardenconsulting.bluetooth;

/**
 * Callback interface to be notified of bluetooth events generated by
 * this package. 
 * @author john.denny@gmail.com
 *
 */
public interface BluetoothListener {
	/**
	 * Get a description of the game, to be displayed on the BluetoothFragment layout.
	 * @return
	 */
	String getHelpString();
	
	/**
	 * @see #onConnectedAsServer(String)
	 */
	void onConnectedAsClient(String deviceName);
	
	/**
	 * The 2 devices have established a bluetooth connection.
	 * The typical action at this point is to hide the bluetooth
	 * fragment and show the game fragment. From now on the
	 * communication between client and server is symmetrical:
	 * both devices can equally send and receive messages.
	 * 
	 * Sometimes it is useful to know which device requested the
	 * connection (the client) and which side accepted that
	 * connection (the server).
	 * 
	 * @param deviceName the name of the remote device
	 */
	void onConnectedAsServer(String deviceName);
	
	/**
	 * Typically the Activity will hide the game fragment and show
	 * the BluetoothFragment, to allow the user to re-connect.
	 */
	void onConnectionLost();
	
	void onError(String message);
	
	/**
	 * A data message has been received from the remote device.
	 * This corresponds to the other device performing a write().
	 * @see BluetoothService#write(byte[] data)
	 * 
	 * @param data
	 */
	void onMessageRead(byte[] data);
	
	/**
	 * A status message sent by the bluetooth service to be displayed
	 * by the activity using Toast.
	 * @param string
	 */
	void onMessageToast(String string);
	
	/**
	 * Called when the user changes his playerName
	 * @param playerName
	 * @param playerEmail
	 */
	void onPlayerNameChange(String playerName, String playerEmail);

	/**
	 * Called when the state of the bluetooth service has changed.
	 * @see class BluetoothService.BTState for possible values.
	 * @param state
	 */
	void onStateChange(BluetoothService.BTState state);
	
	/**
	 * Pass the object that will handle bluetooth communication.
	 * Null if bluetooth not available on this device.
	 * The main method to use in communication is write(byte[] data)
	 * 
	 * @see BluetoothService#write(byte[] data)
	 * @param bluetoothService
	 */
	void setBluetoothService(BluetoothService bluetoothService);

	/**
	 * A status message sent by the bluetooth service to be displayed
	 * somewhere.
	 * @param message
	 */
	void setStatusMessage(String message);
}
