Not sure if this has already been included!
Object passed between amino acids is Properties. "Data" amino acid adds property. Aa1 turns on data; Aa2 turns it off. Aa can get its position, this get Aa's at position -1, -2 etc. Eg aa1, A, C, aa2, awaitresource, which gets type A, name C. Use enums. Protein.get-previousAA (1) or 2. So protein keeps track of aa index.

Doodles ****************************************
How to set the targets? obviously not critical
proteins
either we analyse the DNA, or we set an arbitrary figure? but what if
we leave it as it was, with statics? or what about monitor the use of
each resource? with a protein! we set an initial target, and every time
we run out, we increase the target? targets are passed on the the
daughter cell

int[] aminoAcidTargets;

addAminoAcids(aminoAcids)
	get actual counts for aminoAcidList

	for each aminoAcid:
		typeId = aminoAcid.typeId
		if actualCt[typeId] < aminoAcidTargets[typeId]:
			add aminoAcid;
			aminoAcidAdded = true;



How to detect we have enough RNA? how about, if at start of RNA, there are already
geneSize rna strands, it waits? scenarios:
1st polymerase starts; no RNA; makes 4
after making 1st one (polymerase) ribosome makes 2nd polymerase, which starts,
 as there are < 4 RNAs; so now we have made 8 RNAs, 2 for each protein
The key issue is this: DivideCell should start when we have at lease one copy
 of each protein, whereas we might end up building none of some proteins, and
 more than one of others. What if polymerase shared DNA index, so although there
 might be 2 proteins of polymerase running, they will always produce RNA in the
 correct sequence? This may fit in with real life, as you can't have 2 polymerases
 working on the same bit of DNA at the same time. Similarly, in ribosome always
 takes off the first RNA in the list, it will always produce proteins in the
 correct sequence.

Outline design of proteins**********************************
polymerase
    FindNextGene
    	get DNA
    	find start of gene (promoter)
    GetRNAFromGene
    	wait for required 3 nucleotides
    	add to RNA
    	repeat until end of gene (stop)
ribosome
	GetCodonFromRNA
		if no RNA: waitForRNA
		get next codon
		move to new position
		return codon

		hasMore: if some RNA and not at end
	GetAminoAcidFromCodon
		if stop codon:
			add protein to cell
		else:
			waitForAminoAcid
			add aminoAcid to protein
	AddAminoAcidToProtein
		(incorporated into GetAminoAcidFromCodon)

digestFood
	DigestFood
		wait for food
		get nucleotides
		for each: add to cell
		get DNA
		for each nucleotide: add to cell
		get aminoAcids
		for each: add to cell
		get proteins
		for each:
			get aminoAcids
			for each: add to cell

divideCell
	DivideCell
		only run if another divideCell not running
		wait until enough proteins to divide
		copy DNA:
			for each nucleotide pair:
				wait for matching nucleotide
		for each protein > base proteins:
			stop protein
			move to new cell


Current proposal******************************************************
The problem is this: copyDNA wants A, C, G, T; getRNA wants A, C, G, U;
copyDNA only runs when the cell is ready to split, but getRNA runs without
letup. We want getRNA to stop when there is enough RNA:
	ribosome pauses when >= 8 proteins
	polymerase pauses when each gene has an RNA (i.e. 4 RNAs)
	feed (i.e. get nucleotides and aminoAcids) pauses when
		enough nucleotides for 1 set of genes (RNAs) and copy DNA, and
		enough aminoAcids for all genes
Scenario: syntheticCell created with 4 proteins, aminoAcids for 4 more,
 nucleotides for 1 DNA copy & 8 RNAs
1. Polymerase converts nucleotides into 4 RNAs, and pauses (reached target)
2. Ribosome converts RNAs & aminoAcids to 4 new proteins; Ribosome pauses
3. Polymerase restarts, converts nucleotides into 4 more RNAs, pauses
4. DivideCell waits for other proteins to pause; splits cell, reducing
   parent cell to 4 proteins
5. Ribosome restarts; go to step 2
									Status at end of step
	AmAcids	Nukes	Prots	RNA		Poly	Ribo	Feed
	4		8R,1D	4		-		run 	pause	run (but maybe no food!)
1	4		4R,1D	4		4		pause	run		pause
2	-		4R,1D	8		-		run		pause	run
3	-		1D		8		4		pause	pause	run
4	-		-		4		4		pause	run		run

End of current proposal***********************************************

What is the target?
cells grow and divide; if cell doesn't get any food for a specified time
it dies. If food is supplied at a certain rate, cell population should
stabilise, as some cells will get food and grow, but some cells will die.
If we adjust the food rate, population size should similarly adjust.

Then introduce random mutations; if cell dies, then note how many times
it divided successfully; report its DNA if it divides ok at all! We can
control the frequency of mutations. Mutated cells will grow in number if
they can reproduce faster.

Notes: if protein dies, make another; i.e. protein that scans for dead
proteins, removes it from the cell (which should awaken protein production)
and re-uses the resources.

We could have two types of synthetic cells: one already with enough resources
to create a new cell: amino acids, nucleotides for the RNA, nucleotides
for the DNA; and one with no resources, so it can't grow - at least until
we start feeding it. In reality we don't feed an individual cell, we feed a
population. Which tells us that we need a class CellPopulation, to take the
management away from the front-end.

Problem: the cell has grown sufficiently to split (in this case, 8 proteins)
so next it starts to divide. At some point, it tries to duplicate the DNA,
but the polymerase keeps gobbling it up to make RNA!

Proposal:
	GetFood: (from the environment)
	Digest:
		digestFood
	Divide:
		waitForEnoughProteins
		stopAllOtherProteins (apart from Divide)
		copyDNA
		divideCell

alternatively:
	when there is enough of a resource (e.g. RNA), stop producing it!

In summary:
	cell has targets: 8 proteins, aminoAcids for proteins (currently 1 of each),
	 nucleotides for proteins and DNA copy; calculate these targets in method
	 Cell(DNA dna);
	when proteinCt >= proteinTargetCt (8): cellNeedsMoreProteins.await() -
	 which will be triggered when divideCell moves proteins; i.e. ribosomes
	 stop while divideCell doing its business;
	when rnaCt >= rnaTargetCt: cellNeedsMoreRNA.await()
	ditto: nucleotideCt & aminoAcidCt; rather than individual nucleotides
	 and aminoAcids, get them in sets; another protein detects buildup of
	 specific ones, and discards excess

	Divide now continues to consume nucleotides to produce copy DNA
	(all other proteins are in the WAIT state)
	then stops 4 extra proteins, and moves them to the new cell
	this should re-awaken the ribosome, which hopefully in turn
	will re-awaken the others

Meanwhile, give synthetic cell all amino acids, plus enough nucleotides for:
  copy of DNA; enough RNA for 2 new cells

Good stuff **********************************************
Note the following potential problem situation:
divideCell locks Cell.proteinList, so it can move some proteins to the new cell;
polymerase protein is running, and tries to get a lock on proteinList, so it
can add a new protein, but it is blocked on the synchronized clause;
polymerase will not respond when divideCell tries to interrupt it, because whereas
you can interrupt a thread in WAIT state, you can't interrupt a thread in MONITOR
state, i.e. when it's trying to aquire a lock; this is why we use the classes in
the java.util.concurrent.locks package.

aminoAcid, when first created, belongs to cell; when added
to protein, it then belongs to that protein, which in turn belongs
to the cell; AminoAcid.getCell() now gets it from the protein.

Protein manages its own thread; has methods start() & stop();
currently start creates a new thread; stop() does thread.interrupt(),
but later it may set a stop flag or something.

Don't start DivideCell if one already running in this cell.

In the future, we may need to activate and deactive proteins by
name or group (type); use new gene structure:
    promoterCode, 2 codons for protein type
     (e.g. "stem", "digestion", "division"),
    2 codons for protein name (e.g. "polymerase"), terminatorCode
    all this can be decoded in FindNextGene?
    now can have protein: turnOn/Off protein(s) by name or type
    cell needs method runProtein(name/type); as described below, all
    proteins run in own thread, but some are chains, so wait, some are
    not so only run once. Cell.runProtein could run protein that activates
    a group of proteins

Feeding Design***************
when creating synthetic cell, we get aminoAcids to make this cell plus
daughter cell, using makeAminoAcid(String codonStr)
also initialises static aminoAcidFeedCounts, as guide for food production;

makeCell constructor initialises aminoAcidTargets, which determine when
the cell needs to eat & digest

each cell should one day have different DNA (that's the whole point!)
but will it differ wildly from the initial DNA? If not, maybe we don't
need to bother creating different target counts for each cell? When a
cell runs out of a resource, it will feed, and the food will only be
an approximation of the cell's required resources.

In view of the above, we've decided to simplify things greatly:
  feed whenever a resource is not available; stop feeding after one feed
  don't keep targets per resource; simply have feedCounts for each
     aminoAcid and nucleotide, based on the initial DNA; use these
     when supplying food

Nested Loop Design*****************
polymerase & ribosome overview:
         srcChain       resource    targetChain
    poly Regulator(DNA) nucleotides RNA
    ribo RNA            aminoAcids  protein

logic of polymerase:
  for each codon in DNA:
    rnaCodon = getTargetResource()
    for each nucleotide in codon:
      rnaNucleotide = awaitResource(nucleotide, false)
      rnaCodon.add(rnaNucleotide)
    rna.add(rnaCodon)
  cell.add(rna)

split into 2:
  Serine1 (outer)
  -------
  chainResource = regulator
  targetResource = rna
  body = serine2
  for each codon in DNA:
    dnaCodon = next()
    rnaCodon = serine2(dnaCodon)
    rna.add(rnaCodon)
  return rna
  GlutamicAcid
  ------------
  cell.add(rna)

  Serine2 (inner)
  -------
  chainResource = codon (dna)
  targetResource = codon (rna)
  body = <empty>
  for each nucleotide in codon:
    dnaNucleotide = next()
    // default for empty body:
    rnaNucleotide = awaitResource(dnaNucleotide, false)
    rnaCodon.add(rnaNucleotide)
  return rnaCodon
