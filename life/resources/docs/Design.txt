Note the following potential problem situation:
divideCell locks Cell.proteinList, so it can move some proteins to the new cell;
polymerase protein is running, and tries to get a lock on proteinList, so it
can add a new protein, but it is blocked on the synchronized clause;
polymerase will not respond when divideCell tries to interrupt it, because whereas
you can interrupt a thread in WAIT state, you can't interrupt a thread in MONITOR
state, i.e. when it's trying to aquire a lock; this is why we use the classes in
the java.util.concurrent.locks package.

aminoAcid, when first created, belongs to cell; when added
to protein, it then belongs to that protein, which in turn belongs
to the cell; AminoAcid.getCell() now gets it from the protein.

Protein manages its own thread; has methods start() & stop();
currently start creates a new thread; stop() does thread.interrupt(),
but later it may set a stop flag or something.

Don't start DivideCell if one already running in this cell.

In the future, we may need to activate and deactive proteins by
name or group (type); use new gene structure:
    promoterCode, 2 codons for protein type
     (e.g. "stem", "digestion", "division"),
    2 codons for protein name (e.g. "polymerase"), terminatorCode
    all this can be decoded in FindNextGene?
    now can have protein: turnOn/Off protein(s) by name or type
    cell needs method runProtein(name/type); as described below, all
    proteins run in own thread, but some are chains, so wait, some are
    not so only run once. Cell.runProtein could run protein that activates
    a group of proteins

    private static String dnaStr =
            promoterCode + proteinTypeStem + proteinNamePolymerase +
                    "TTGTCT" + terminatorCode +
                    promoterCode + proteinTypeStem + proteinNameRibosome +
                    "TTATTCTTT" + terminatorCode +
                    promoterCode + proteinTypeDivision + proteinNameDivide +
                    "TAC" + terminatorCode +
                    promoterCode + proteinTypeDigestion + proteinNameDigest +
                    "TAG" + terminatorCode;

