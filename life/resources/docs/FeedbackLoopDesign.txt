If proteins continued to consume all the available resources, Polymerase
would convert the nucleotides to RNA, and leave none for CopyDNA. With a
feedback loop, Polymerase would stop when there is enough RNA.
More generally, cell could eat and digest food faster than it's being
converted to resources.

New design***********************************
Regulator; controls production of specific protein
  dnaIndex; position of start of gene for this protein
  targetCt; target number of this protein
  rnaCt; incremented when we give the go-ahead to build RNA
  proteinCt; incremented when protein added
RNA
  codonList
  newProtein
Protein
  aminoAcidList
  regulator

Cell
  rnaListLock: add and remove rna
    rnaAvailableCondition
      awaited by ribosome
      signalled by polymerase
  proteinListLock: add and remove protein
  aminoAcidListLock: add and remove aminoAcid
    aminoAcidAvailableCondition
      awaited by cell.awaitAminoAcid (ribosome)
      signalled by digestFood
  nucleotideListLock: add and remove nucleotide
    nucleotideAvailableCondition
      awaited by cell.awaitNucleotide (ribosome & divideCell)
      signalled by digestFood
  regulatorListLock
    rnaBelowTargetCondition: rnaCt < targetCt
      awaited by polymerase
      signalled by divideCell
    cellReadyToDivideCondition: proteinCt >= targetCt
      awaited by divideCell
      signalled by ribosome
  foodListLock: add and remove food
    foodAvailableCondition
      awaited by digestFood
      signalled by eatFood
    needMoreFoodCondition
      awaited by eatFood
      signalled by waitForAminoAcid & waitForNucleotide

Cell.analyseDNA
  for each gene start point:
    new Regulator, where proteinCt=0, rnaCt=1 (as protein added without RNA)
    add to regulatorList
Cell.addProtein
  ++regulator.proteinCt

polymerase
  regulator = cell.awaitRnaBelowTarget()
    increment rnaCt // while regulatorList is locked
  add new protein to regulator
  build RNA
    protein = new Protein()
    protein.regulator = regulator
    rna.protein = protein
  cell.addRna(rna)
    add rna to rnaList
    rnaAvailable.signalAll

ribosome
  notes: remove cell.getNeedMoreProteins
    if there is rna, we need to build a protein!
    remove cell.needMoreRNA; replaced by awaitRnaBelowTarget
  rna = cell.awaitRNA()
    remove rna while rnaList locked
  getNextCodon from rna
  get matching amino acid
  add amino acid to protein
  cell.addProtein // while proteinList locked
  if now ready to divide: readyToDivide.signalAll()

divideCell
  await readyToDivide
    lock regulatorList
    for each regulator: check proteinCt >= targetCt
  split cell
  set regulator counts
    for each protein moved
      parentCell.regulator: --proteinCt, --rnaCt
  rnaBelowTarget.signalAll()

remove from cell: dnaIndex, dnaIndexLock
remove Cell.geneSize? in any case, it's supercede by regulatorList.size()
check any other double locking, i.e. lockA.lock() then lockBCondition.await();

End of new design****************************

consumeResources
	polymerase: nucleotides to RNA
	ribosome: aminoAcids to proteins
	divideCell: nucleotides to DNA
produceResource
	digestFood: food to nucleotides & aminoAcids
	eatFood: make food available

Feedback loop could be designed in one of two ways:
	Produce resources on demand:
	Ribosome asks for specific RNA or aminoAcid; not available; triggers
	 production of RNA (Polymerase)
	Polymerase asks for specific nucleotide; not available; triggers
	 EatFood and DigestFood.
	This doesn't seem to match real life, as some proteins would have to
	wait while we go and feed, but the proteins might well be the ones
	that give us the energy to feed!
or:
	Targets, so that protein stops when the target for that resource has
	been reached; e.g. digest only adds enough resources to targets, then
	discards the rest, and stops digesting until some of the resources are
	consumed. We'll go with this one!

ProteinList
	// when size >= proteinSizeForDivide: stop ribosome & start divide
	ribosome
	  while size >= proteinSizeForDivide: needMoreProteins.await()
	  (produceProtein)
	  cell.addProtein(newProtein)
	  	if size >= proteinSizeForDivide: cellReadyToDivide.signalAll()
	divideCell
	  while size < proteinSizeForDivide: cellReadyToDivide.await()
	  (move some proteins to new cell)
	  cell.removeProtein()
	    if size < proteinSizeForDivide: needMoreProteins.signalAll()

RNAList
	// when size >= proteinSizeForDivide: stop polymerase
	// when size == 0: stop ribosome
	ribosome
	  cell.waitForRNA()
	    while no RNA: rnaAvailable.await()
	    (get RNA from list)
		if size < geneSize: needMoreRNA.signalAll()
	polymerase
	  while rnaList.size() >= geneSize: needMoreRNA.await()
	  (produceRNA)
	  cell.addRNA(newRNA)
	  	rnaAvailable.signalAll()

AminoAcidList
	// when size == 0: stop ribosome
	// when enough amino acids for 1 of each protein:
	//     stop digesting aminoAcids
	ribosome
	  cell.waitForAminoAcid()
		if size < geneSize: needMoreFood.signalAll()
	    while no AminoAcid: aminoAcidAvailable.await()
	digestFood
	  (see FoodList below)
	  cell.addAminoAcids(aminoAcids)
	  	aminoAcidAvailable.signalAll()

NucleotideList
	// when size == 0: stop polymerase & copyDNA
	// when enough nucleotides for 1 of each protein & 1 DNA:
	//	 stop digesting nucleotides
	copyDNA
	  for each nucleotide
		cell.waitForNucleotide(nucleotide)
		  if size < target for this nucleotide:
		    needMoreFood.signalAll()
		  while no matching nucleotide: nucleotideAvailable.await()
		(add to new DNA)
	polymerase
	  (as for copyDNA)
	digestFood
	  (see FoodList below)
	  cell.addNucleotide(nucleotide)
	  	nucleotideAvailable.signalAll()

FoodList (outline design)
	// digest all the available food, but discard any excess
	digestFood
	  cell.waitForFood()
	    while no Food: foodAvailable.await()
	  get Nucleotides from Food
	  cell.addNucleotides(nucleotides)
	  	for each type:
		  add up to target for that type, e.g. Cell.adenineFor1Cell
        nucleotideAvailable.signalAll()
	  get AminoAcids from Food
	  cell.addAminoAcids(aminoAcids)
		for each type:
		  add up to target for that type
	  	aminoAcidAvailable.signalAll()

	// eat food when we need more resources
	eatFood
	  while !{need aminoAcids or nucleotides}
		needMoreFood.await()
	  (getFood from environment)
	  cell.addFood(food)
	  	foodAvailable.signalAll()