Outline for 20 aminoAcids***********************************
	Ribosome
		RNA rna = cell.waitForRNA()              - DONE
		AminoAcid = cell.waitForAminoAcid(codon) - DONE
	Polymerase
		Regulator regulator = cell.waitForRnaBelowTarget()  - DONE
		Nucleotide first = cell.waitForNucleotide(dna.getFromTemplate(i), false)
	WaitForEnoughProteins - DONE
		[potentially: boolean readyToDivide = cell.waitForCellReadyToDivide()
	CopyDNA
		Nucleotide nucleotideCopy = cell.waitForNucleotide(nucleotide, true)
	DigestFood
		Food food = cell.waitForFood()      - DONE
	EatFood
		Food food = cellEnvironment.waitForFood()

Current actions *************************************************

Loop within a loop; not yet fully designed!
Serine:
  if no body, assume awaitResource (Tryptophan)
Tryptophan:
  is resource is not null, and is recognised:
    use resource instead of data

whichever way we look at it, we need 2 body lists!

logic of polymerase:
  for each codon in DNA:
    rnaCodon = getTargetResource()
    for each nucleotide in codon:
      rnaNucleotide = awaitResource(nucleotide, false)
      rnaCodon.add(rnaNucleotide)
    rna.add(rnaCodon)
  cell.add(rna)

split into 2:
  Serine1
  -------
  chainResource = regulator
  targetResource = rna
  body = serine2
  for each codon in DNA:
    dnaCodon = next()
    rnaCodon = serine2(dnaCodon)
    rna.add(rnaCodon)
  return rna
  GlutamicAcid
  ------------
  cell.add(rna)

  Serine2
  -------
  chainResource = codon (dna)
  targetResource = codon (rna)
  body = <empty>
  for each nucleotide in codon:
    dnaNucleotide = next()
    // default for empty body:
    rnaNucleotide = awaitResource(dnaNucleotide, false)
    rnaCodon.add(rnaNucleotide)
  return rnaCodon

Previous notes
--------------
body mode
waitForResource (nucleotide)
data
codon
code
serine
  get chainResource // dnaCodon
  get targetResource // rnaCodon
  get body
  while chainResource.hasNext:
    node = chainResource.next // next nucleotide
    for each step in body:
    	node = waitForNucleotide(node)
    targetResource.add(processedNode) // add nucl. to rnaCodon
  return targetResource (rnaCodon)

"TTA" + // Leucine, turn on body mode
"GCT" + // Alanine, convert DNA codon to RNA codon
"GAT" + // AsparticAcid (data)
"CCT" + // Proline (regulator)
"TGT" + // Cysteine (code)
"TGG" + // Tryptophan (awaitResource: regulator)
"TCT" + // Serine, loop
"GAA",  // GlutamicAcid (add resource - RNA - to cell)

Serine
  get chainResource // regulator (DNA)
  get targetResource // new RNA
  get body
  while chainResource.hasNext:
    node = chainResource.next // next codon
    for each step in body:
    	getNext()
        process node // convert DNA codon to RNA codon
    targetResource.add(processedNode) // add codon to RNA
  return targetResource
GlutamicAcid
  add RNA to cell

	could 2 threads be accessing the same regulator?!

	ribosome, builds a protein (chain of amino acids)
    from RNA (chain of nucleotides)

    RNA (chainResource)
      codonChain
      newProtein (targetResource)
      index - current place within codonChain

    Regulator (chainResource; can only be accessed by
    	   one thread at a time, otherwise geneIndex will
    	   be corrupted)
      final Cell
      final startIndex
      final stopIndex
      newRNA (targetResource)
      geneIndex (current position within gene)
	  getTargetResource(): return new RNA,
		which already has new protein attached
		and the new protein is linked to the regulator
	  hasNext(): any more codons in DNA
	  next(): next codon from DNA

         srcChain       resource    targetChain
    poly Regulator(DNA) nucleotides RNA
    ribo RNA            aminoAcids  protein
******************************************
change DNA to use Codons instead of Nucleotides directly; write test
for methods used by copy DNA; not sure if this is a good idea; we'll
know when we've done polymerase

once we've removed pseudo amino acids, extend matchCodon to include
 alternative mappings

tidy up documentation so far, and write report on work so far

check locks & conditions and Thread.isInterrupted()

convert killCell to protein; cell maintain list of cells to be killed

End of current actions *****************************************

Next Steps
	optionally make colours sliding scale
	http://stackoverflow.com/questions/340209/generate-colors-between-red-and-green-for-a-power-meter

investigate warnings in code
improve protein status
make sure TestCell and MasterDesigner still work

Create nucleicAcid and aminoAcid from more basic raw materials,
instead of from existing cells

Split amino acids into target 20! *****************************
  e.g. isChain(), hasMore() could be replaced by aminoAcid that
  simply sets a property on the protein: boolean isChain;
  isChain could then occur anywhere in the sequence, so not
  making a special 'control amino acid' from the first

Single molecules
	nucleicAcid
	aminoAcid

chain = findChain(type) // type=DNA, RNA, Protein; may wait
element = findResource(type, name) // name=<aminoAcidName>, <nucleotideName>
chain.moveToStart()
element = chain.getNext() // or null for end
element = chain.removeCurrent()
chain.add(element) // also removes it from chain or free list

removeAminoAcid()
attachAminoAcid - to protein
detatch object from chain
findDNAChain()
moveToNext

Current aminoAcids******************
polymerase
    FindNextGene
    	get DNA
    	find start of gene (promoter)
    GetRNAFromGene
    	wait for required 3 nucleotides
    	add to RNA
    	repeat until end of gene (stop)
ribosome
	GetCodonFromRNA
		if no RNA: waitForRNA
		get next codon
		move to new position
		return codon

		hasMore: if some RNA and not at end
	GetAminoAcidFromCodon
		if stop codon:
			add protein to cell
		else:
			waitForAminoAcid
			add aminoAcid to protein
	AddAminoAcidToProtein
		(incorporated into GetAminoAcidFromCodon)

digestFood
	DigestFood
		wait for food
		get nucleotides
		for each: add to cell
		get DNA
		for each nucleotide: add to cell
		get aminoAcids
		for each: add to cell
		get proteins
		for each:
			get aminoAcids
			for each: add to cell

divideCell
	DivideCell
		only run if another divideCell not running
		wait until enough proteins to divide
		copy DNA:
			for each nucleotide pair:
				wait for matching nucleotide
		for each protein > base proteins:
			stop protein
			move to new cell

20 aminoAcids **********************
attach to matching resource; perhaps use some
aminoAcids to identify resourceType

move to next element in chain

add created resource (e.g. protein) to cell

Complete Actions *************************************
replace FindNextGene, GetRNAFromGene with Polymerase - DONE

remove all synchronized - DONE

in DivideCell, signal needMoreProteins if ct < 2 * geneCt - DONE

similarly if rnaCt < geneCt, notify needMoreRna - DONE

follow pattern in javadoc of interface
 java.util.concurrent.locks.Condition - DONE

similarly signal needMoreFood - DONE

static counts for proteins, aminoAcids and RNA and nucleotides need to be
non-static, as each cell could have different DNA! - DONE

pass on targets in DivideCell - DONE

is there an inconsistency, in that Cell applies the locks & conditions for
get<resource>, but the amino acids do it for put<resource>? - NO

remove onCellChanged(Cell cell); - DONE

remove cell listener - DONE

remove Cell.active - DONE

for each Condition, have corresponding boolean method, e.g. - DONE
	private Condition cellReadyToDivide;
	public boolean isCellReadyToDivide() {
		return proteinList.size() > (geneSize * 2);
	}

replace AminoAcid method: Object action(Object object)
with: CellResource action(CellResource resource)     - DONE

add boolean startLife to CellEnvironment; if true add syntheticCell - DONE

use Thread pool - DONE

CellListener: notification that there are new or newly dead cells; LifeFX then
pulls the list back if it wants - DONE

clients get all data using pull from CellEnvironment instead of push;
ideally clients get cellData, rather than cells - DONE

make DNA double strand: template for RNA and complementing strand - DONE

feedbackLoop is allowing multiples of one DNA and none of another; ditto proteins
a class (that later should become a protein!) that keeps track of each gene:
	int dnaIndex; // dna never changes within a cell, only producing new cell
	int targetCt; // target number of proteins to be built
	int actualCt;
during protein creation, increment actualCt; during split, decrement actualCt;
polymerase waits for needDNA
this supercedes the current DNA feedback loop - DONE

calculate geneSize from DNA (which may change) rather than from - DONE
 static geneStrs.length (which doesn't, and isn't even calculated for
 daughter cells!)

in LifeFX, show list of RNA strands - DONE

remove proteinListLock; use regulatorListLock instead - DONE

check-out if we need Thread.isInterrupted() - YES

factor out our first reusable aminoAcid: GetResource - DONE

make synthetic cell out of DNA - DONE

As part of the DNA, specify how many instances of a protein need to run - DONE
remove Cell.isDivideCellRunning and AminoAcid.activateOnCreate()

CellEnvironment: add dead cells to foodList - DONE

could the protein name be replaced by its RNA gene, without the stop,
 as a string? - DONE

aminoAcidFeed targets, done like nucleotides       - DONE
add aminoAcidActuals, similar to nucleotideActuals
decided to simplify the whole thing; see Feeding in design.txt
