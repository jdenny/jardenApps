Outline for 20 aminoAcids***********************************
getResource: DNA, RNA, aminoAcid, nucleotide
getNextResourceNode: DNA or RNA

resource = waitForResource(type)
w,Typtophan,waitForResource
r,Arginine,RNA
d,Aspartic Acid,DNA
a,Alanine,AminoAcid
n,Asparagine,Nucleotide
examples:
	Ribosome
		RNA rna = cell.waitForRNA()                - DONE
		AminoAcid = cell.waitForAminoAcid(codon)
	Polymerase
		Regulator regulator = cell.waitForRnaBelowTarget()
		Nucleotide first = cell.waitForNucleotide(dna.getFromTemplate(i), false)
	WaitForEnoughProteins
		[potentially: boolean readyToDivide = cell.waitForCellReadyToDivide()
	CopyDNA
		Nucleotide nucleotideCopy = cell.waitForNucleotide(nucleotide, true)
	DigestFood
		Food food = cell.waitForFood()
	EatFood
		Food food = cellEnvironment.waitForFood()

Current actions *************************************************
tidy up documentation so far, and write report on work so far

check locks & conditions and Thread.isInterrupted()

remove interface Food?

factor out our first reusable aminoAcid: GetResource

currently: (try to keep resource exactly at target)
	when resource met target, stop digesting;
	when resource < target, start feeding
replace with: (keep resource from 0 to target)
	when resource met target, stop digesting;
	when resource empty, start feeding and increment target
or: (keep resource from target to 2 * target, i.e. upperTarget)
	when resource met upperTarget, stop digesting, i.e. discard surplus
	when resource < lowerTarget, start feeding
	when resource empty, increment target
	*** go with this one ***

add aminoAcidActuals, similar to nucleotideActuals

could the protein name be replaced by its RNA gene, without the stop,
 as a string?

convert killCell to protein; cell maintain list of cells to be killed

when we've converted all our amino acids into the 20 proper names,
then we can have a definitive list of aminoAcids, as we already have
a definitive list of nucleotides (5); so we can hold the resource
targets like this:
	int[] aminoAcidTargets; // in same sequence as aminoAcid list
	int[] nucleotideTargets; // in same sequence as nucleotide list
maybe one day, the calculation of the resource targets could itself
be a protein!

End of current actions *****************************************

Next Steps
	optionally make colours sliding scale
	http://stackoverflow.com/questions/340209/generate-colors-between-red-and-green-for-a-power-meter

investigate warnings in code
improve protein status
make sure TestCell and MasterDesigner still work

Create nucleicAcid and aminoAcid from more basic raw materials,
instead of from existing cells

Split amino acids into target 20! *****************************
  e.g. isChain(), hasMore() could be replaced by aminoAcid that
  simply sets a property on the protein: boolean isChain;
  isChain could then occur anywhere in the sequence, so not
  making a special 'control amino acid' from the first

Single molecules
	nucleicAcid
	aminoAcid

chain = findChain(type) // type=DNA, RNA, Protein; may wait
element = findResource(type, name) // name=<aminoAcidName>, <nucleotideName>
chain.moveToStart()
element = chain.getNext() // or null for end
element = chain.removeCurrent()
chain.add(element) // also removes it from chain or free list

removeAminoAcid()
attachAminoAcid - to protein
detatch object from chain
findDNAChain()
moveToNext

Current aminoAcids******************
polymerase
    FindNextGene
    	get DNA
    	find start of gene (promoter)
    GetRNAFromGene
    	wait for required 3 nucleotides
    	add to RNA
    	repeat until end of gene (stop)
ribosome
	GetCodonFromRNA
		if no RNA: waitForRNA
		get next codon
		move to new position
		return codon

		hasMore: if some RNA and not at end
	GetAminoAcidFromCodon
		if stop codon:
			add protein to cell
		else:
			waitForAminoAcid
			add aminoAcid to protein
	AddAminoAcidToProtein
		(incorporated into GetAminoAcidFromCodon)

digestFood
	DigestFood
		wait for food
		get nucleotides
		for each: add to cell
		get DNA
		for each nucleotide: add to cell
		get aminoAcids
		for each: add to cell
		get proteins
		for each:
			get aminoAcids
			for each: add to cell

divideCell
	DivideCell
		only run if another divideCell not running
		wait until enough proteins to divide
		copy DNA:
			for each nucleotide pair:
				wait for matching nucleotide
		for each protein > base proteins:
			stop protein
			move to new cell



20 aminoAcids **********************
attach to matching resource; perhaps use some
aminoAcids to identify resourceType

move to next element in chain

add created resource (e.g. protein) to cell

Complete Actions *************************************
replace FindNextGene, GetRNAFromGene with Polymerase - DONE

remove all synchronized - DONE

in DivideCell, signal needMoreProteins if ct < 2 * geneCt - DONE

similarly if rnaCt < geneCt, notify needMoreRna - DONE

follow pattern in javadoc of interface
 java.util.concurrent.locks.Condition - DONE

similarly signal needMoreFood - DONE

static counts for proteins, aminoAcids and RNA and nucleotides need to be
non-static, as each cell could have different DNA! - DONE

pass on targets in DivideCell - DONE

is there an inconsistency, in that Cell applies the locks & conditions for
get<resource>, but the amino acids do it for put<resource>? - NO

remove onCellChanged(Cell cell); - DONE

remove cell listener - DONE

remove Cell.active - DONE

for each Condition, have corresponding boolean method, e.g. - DONE
	private Condition cellReadyToDivide;
	public boolean isCellReadyToDivide() {
		return proteinList.size() > (geneSize * 2);
	}

replace AminoAcid method: Object action(Object object)
with: CellResource action(CellResource resource)     - DONE

add boolean startLife to CellEnvironment; if true add syntheticCell - DONE

use Thread pool - DONE

CellListener: notification that there are new or newly dead cells; LifeFX then
pulls the list back if it wants - DONE

clients get all data using pull from CellEnvironment instead of push;
ideally clients get cellData, rather than cells - DONE

make DNA double strand: template for RNA and complementing strand - DONE

feedbackLoop is allowing multiples of one DNA and none of another; ditto proteins
a class (that later should become a protein!) that keeps track of each gene:
	int dnaIndex; // dna never changes within a cell, only producing new cell
	int targetCt; // target number of proteins to be built
	int actualCt;
during protein creation, increment actualCt; during split, decrement actualCt;
polymerase waits for needDNA
this supercedes the current DNA feedback loop - DONE

calculate geneSize from DNA (which may change) rather than from - DONE
 static geneStrs.length (which doesn't, and isn't even calculated for
 daughter cells!)

in LifeFX, show list of RNA strands - DONE

remove proteinListLock; use regulatorListLock instead - DONE

check-out if we need Thread.isInterrupted() - YES
